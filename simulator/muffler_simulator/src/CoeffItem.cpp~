#include "CoeffItem.h"

#include <Eigen/Dense>

#ifdef TEST
#include <iostream>
#endif

using namespace std;
using namespace Eigen;

CoeffItem::CoeffItem(const int _n_num, UtilTools& _utiltools) : utiltools(_utiltools) {
	n_num = _n_num;
}

void CoeffItem::insert(NodeIndex n, double coefficient) {
	if (coeff.find(n) == coeff.end()) {
		coeff.insert(map<NodeIndex, double>::value_type(n, coefficient));
	}
	else {
		coeff[n] += coefficient;
	}
}

void CoeffItem::insert(NodeIndex n, double coefficient, const int flag) {
	if (flag == REAL) {
		insert(n, coefficient);
	}
	else {
		insert(n + n_num, coefficient);
	}
}

void CoeffItem::clear() {
	coeff.clear();
	constant = 0;
}

void CoeffItem::gradient_dot_norm(const Volume &v, const Face &surf_f,
	const double multiplier, const int flag) {

	// determine inner node
	NodeIndex inner_n = -1;
	for (int i = 0; i < VOLUME_NODE_NUM; i++) {
		if (!surf_f.contains(v[i])) {
			inner_n = v[i];
			break;
		}
	}
	assert(inner_n != -1);

	// compute surface norm
	Vector3d surf_norm = utiltools.norm_vec(surf_f, inner_n) / 2;

	// compute coefficient & add to CoeffItem
	double volume = utiltools.volume(v);
	for (int i = 0; i < 4; i++) {
		NodeIndex n = v[i];
		Face f;
		for (int j = 0; j < 3; j++) {
			f[j] = v[(i + 1 + j) % 4];
		}
		Vector3d norm = utiltools.norm_vec(f, n);
		norm = norm / (6 * volume);
		double coefficient = norm.dot(surf_norm) * multiplier;
		insert(v[i], coefficient, flag);
	}
}

void CoeffItem::average(const Volume &v, const double multiplier, int flag) {
	for (int i = 0; i < 4; i++) {
		double coefficient = 1.0 / 4 * multiplier;
		insert(v[i], coefficient, flag);
	}
}

void CoeffItem::laplace(const vector<Volume> &v_set, const vector<Face> &f_set,
	const vector<set<VolumeIndex>> &ring_1_v,
	const vector<set<FaceIndex>> &ring_1_f,
	const NodeIndex &n, const double multiplier, int flag) {
	// compute 1-ring volume
	double ring_1_v_volume = 0;
	for (set<VolumeIndex>::iterator it = ring_1_v[n].begin(); it != ring_1_v[n].end(); it++) {
		ring_1_v_volume += utiltools.volume(v_set[*it]);
	}

	// \laplace = \sum{ \grad * \norm } / ring_1_v_volume (From Green Formula)
	for (set<FaceIndex>::iterator it = ring_1_f[n].begin(); it != ring_1_f[n].end(); it++) {
		// construct each face and its corresponding volume
		Face opposite_f = f_set[*it];
		Volume near_v;
		for (int i = 0; i < 3; i++) {
			near_v[i] = opposite_f[i];
		}
		near_v[3] = n;

		// compute integral in each volume (using Green Formula)
		gradient_dot_norm(near_v, opposite_f, 1.0 / ring_1_v_volume, flag);
	}
}

void CoeffItem::own(const NodeIndex& n, const double multiplier, int flag) {
	insert(n, multiplier, flag);
}

void CoeffItem::constance(const double _constant) {
	constant = _constant;
}
