

#include "Constant.h"
#include "CoeffItem.h"
#include "CoeffMatrix.h"
#include "ConfigReader.h"
#include "DataFiller.h"
#include "Object.h"
#include "UtilTools.h"
#include "VtkReader.h"

#include <iostream>
#include <map>
#include <sstream>

int err = 0;

void checkError(const std::string comment) {
  if (err == 0)
		return;
	std::cerr << "Error: in " << comment << ": ";
	switch (err) {
	case ERR_FILE_OPEN:
		std::cerr << "open file failed" << std::endl;
		break;
	case ERR_FILE_FORMAT:
		std::cerr << "wrong file format" << std::endl;
		break;
	case ERR_WRONG_ARG_NUMBER:
		std::cerr << "usage: default-config-file config-file model-file"
			<< std::endl;
	default:
		std::cerr << "unexpected error" << std::endl;
		break;
	}
}

void pipeline(const std::string default_config_file,
	const std::string config_file, const std::string model_file, const std::string output_model_file) {

	////////////////////-Physical Coefficient-//////////////
	double freq;
	double speed;
	double omega;
	double rho;
	double impedance;
	double p0_real, p0_imag;

	Plain inlet;
	Plain outlet;

	////////////////////-Load Config-///////////////////////
	ConfigReader config_reader;
	err = config_reader.loadConfig(default_config_file, freq, speed, rho, p0_real,
		p0_imag, inlet, outlet);
	checkError("loading default config");
	err = config_reader.loadConfig(config_file, freq, speed, rho, p0_real,
		p0_imag, inlet, outlet);
	checkError("loading config");
	omega = 2 * PI * freq;
	impedance = rho * speed;

#ifdef TEST
	std::cout << "freq = " << freq << std::endl;
	std::cout << "speed = " << speed << std::endl;
	std::cout << "rho = " << rho << std::endl;
#endif

	////////////////////-Data Structure-////////////////////
	int n_num;

	Eigen::Matrix<double, Eigen::Dynamic, 3> n_set;
	std::vector<Volume> v_set;
	std::vector<Face> f_set;

	std::vector<std::set<VolumeIndex>> ring_1_v;
	std::vector<std::set<NodeIndex>> ring_1_n;
	std::vector<std::set<FaceIndex>> ring_1_f;

	std::vector<std::set<NodeIndex>> face_near_n;
	std::vector<std::set<VolumeIndex>> face_near_v;

	std::vector<ElementType> f_type;
	std::vector<ElementType> n_type;
#ifdef TEST
	Eigen::VectorXd n_type_vec;
#endif

	////////////////////////-Start-/////////////////////////

	VtkReader vtk_io;
	err = vtk_io.getData(model_file, n_set, v_set);
	if (err != 0) {
	  return;
	}
	n_num = n_set.rows();

	UtilTools tools(n_set, n_num);

	DataFiller filler(tools);
	filler.getFaceSet(v_set, f_set);
	filler.getFaceNearNode(v_set, f_set, face_near_n);
	filler.getFaceNearVolume(v_set, f_set, face_near_v);
	filler.getOneRingVolume(n_num, v_set, ring_1_v);
	filler.getOneRingNode(n_num, v_set, ring_1_n);
	filler.getOneRingFace(n_num, face_near_n, ring_1_f);
	filler.getFaceType(inlet, outlet, f_set, face_near_n, f_type);
	filler.getNodeType(n_num, f_set, f_type, n_type);
#ifdef TEST
	filler.getNodeTypeVec(n_type, n_type_vec);
#endif
	filler.clear();

#ifdef TEST
	err = vtk_io.writeData("../../log/n_type.vtk", n_set, v_set, n_type_vec, REAL);
	checkError("writing output model");
#endif

#ifdef LOG
	std::cout << "Build matrix ..." << std::endl;
#endif
	CoeffMatrix coeff_mat;
	CoeffItem coeff_item(n_num, tools);
	coeff_mat.init(f_type, n_type);
	
#ifdef TEST_LAPLACE
	for (int i=0; i<n_type.size(); i++) {
	  if (n_type[i] == INNER) {
	    coeff_item.clear();
	    coeff_item.laplace(v_set, f_set, ring_1_v, ring_1_f, i, 1.0, REAL);
	    coeff_item.own(i, 1, REAL);
	    coeff_item.constance(0);
	    coeff_mat.put(coeff_item);
	  }
	}
	for (int i=0; i<n_type.size(); i++) {
	  if (n_type[i] == HARD) {
	    coeff_item.clear();
	    coeff_item.own(i, 1, REAL);
	    switch (i) {
	    case 1:
	      coeff_item.constance(1);
	      break;
	    case 2:
	      coeff_item.constance(1);
	      break;
	    case 3:
	      coeff_item.constance(0);
	      break;
	    case 6:
	      coeff_item.constance(3);
	      break;
	    default:
	      coeff_item.constance(1);
	      break;
	    }
	    coeff_mat.put(coeff_item);
	  }
	}
#endif

#ifdef NORMAL	
#ifdef LOG
	std::cout << "  inner part : ";
#endif
	// inner part: \laplace p + omega^2 / speed^2 * p = 0
	for (int i = 0; i < n_type.size(); i++) {
	  //std::cout << n_type[i] << " " << INNER << std::endl;
	  if (n_type[i] == INNER || n_type[i] == HARD || n_type[i] == INLET) {
	    coeff_item.clear();
	    coeff_item.laplace(v_set, f_set, ring_1_v, ring_1_f, i, 1.0, REAL);
	    if (n_type[i] == INNER) {
	      coeff_item.own(i, (omega * omega) / (speed * speed), REAL);
	    } else {
	      coeff_item.own(i, (omega * omega) / (speed * speed) / 2, REAL);
	    }
	    coeff_item.constance(0);
	    coeff_mat.put(coeff_item);

	    coeff_item.clear();
	    coeff_item.laplace(v_set, f_set, ring_1_v, ring_1_f, i, 1.0, IMAG);
	    if (n_type[i] == INNER) {
	      coeff_item.own(i, (omega * omega) / (speed * speed), IMAG);
	    } else {
	      coeff_item.own(i, (omega * omega) / (speed * speed) / 2, IMAG);
	    }
	    //coeff_item.own(i, (omega * omega) / (speed * speed), IMAG);
	    coeff_item.constance(0);
	    coeff_mat.put(coeff_item);
	  }
#ifdef LOG
	  if (n_type.size() > 100 && i % (n_type.size() / 10) == 0) std::cout << "#";
#endif
	}
#ifdef LOG
	std::cout << std::endl;
#endif

#ifdef LOG
	std::cout << "  hard wall part : ";
#endif
	// hard wall reflection: \grad p dot norm = 0
	/*for (int i = 0; i < f_type.size(); i++) {
	  if (f_type[i] == HARD) {
	    assert(face_near_v[i].size() == 1);
	    coeff_item.clear();
	    coeff_item.gradient_dot_norm(v_set[*face_near_v[i].begin()], f_set[i],  1.0, REAL);
	    coeff_item.constance(0);
	    coeff_mat.put(coeff_item);

	    coeff_item.clear();
	    coeff_item.gradient_dot_norm(v_set[*face_near_v[i].begin()], f_set[i], 1.0, IMAG);
	    coeff_item.constance(0);
	    coeff_mat.put(coeff_item);
	  }
#ifdef LOG
	    if (f_type.size() > 100 && i % (f_type.size() / 10) == 0) std::cout << "#";
#endif
}*/
#ifdef LOG
	std::cout << std::endl;
#endif

#ifdef LOG
	std::cout << "  inlet part : ";
#endif
	// inlet boundary: \grad p dot norm + j * (omega / speed) * p - 2j * (omega / speed) p0 = 0
	// let p = a + b * j, omega / speed = c, p0 = p0_real + p0_imag * j
	// then we have real part: \grad a dot norm - c * b = - 2 * c * p0_imag
	// and imaginary part: \grad b dot norm + c * a = 2 * c * p0_real
	/*for (int i = 0; i < f_type.size(); i++) {
	  if (f_type[i] == INLET) {
	    Face f = f_set[i];
	    Volume v = v_set[*face_near_v[i].begin()];
		  
	    coeff_item.clear();
	    coeff_item.gradient_dot_norm(v, f, 1.0, REAL);
	    coeff_item.average(v, -1 * omega / speed, IMAG);
	    coeff_item.constance(-2 * omega / speed * p0_imag);
	    coeff_mat.put(coeff_item);

	    coeff_item.clear();
	    coeff_item.gradient_dot_norm(v, f, 1.0, IMAG);
	    coeff_item.average(v, omega / speed, REAL);
	    coeff_item.constance(2 * omega / speed * p0_real);
	    coeff_mat.put(coeff_item);
	    }
	    #ifdef LOG
	  if (f_type.size() > 100 && i % (f_type.size() / 10) == 0) std::cout << "#";
#endif
}*/
	for (int i=0; i<n_type.size(); i++) {
	  if (n_type[i] == INLET) {
	    coeff_item.clear();
	    coeff_item.own(i, 1, REAL);
	    coeff_item.constance(p0_real);
	    coeff_mat.put(coeff_item);

	    coeff_item.clear();
	    coeff_item.own(i, 1, IMAG);
	    coeff_item.constance(p0_imag);
	    coeff_mat.put(coeff_item); 
	  }
	}
#ifdef LOG
	std::cout << std::endl;
#endif

#ifdef LOG
	std::cout << "  outlet part : ";
#endif
	// outlet boundary: \grad p dot norm + j * (omega / speed) * p = 0
	// let p = a + b * j, omega / speed = c
	// then we have real part: \grad a dot norm - c * b = 0
	// and imaginary part: \grad b dot norm + c * a = 0
	for (int i = 0; i < f_type.size(); i++) {
		if (f_type[i] == OUTLET) 
		  {
		    Face f = f_set[i];
		    Volume v = v_set[*face_near_v[i].begin()];
		  
		    coeff_item.clear();
		    coeff_item.gradient_dot_norm(v, f, 1.0, REAL);
		    coeff_item.average(v, -1 * omega / speed, IMAG);
		    coeff_item.constance(0);
		    coeff_mat.put(coeff_item);

		    coeff_item.clear();
		    coeff_item.gradient_dot_norm(v, f, 1.0, IMAG);
		    coeff_item.average(v, omega / speed, REAL);
		    coeff_item.constance(0);
		    coeff_mat.put(coeff_item);
		  }
#ifdef LOG
		if (f_type.size() > 100 && i % (f_type.size() / 10) == 0) std::cout << "#";
#endif
	}
#ifdef LOG
	std::cout << std::endl;
#endif
#endif

	Eigen::VectorXd result;
	coeff_mat.solve(result);
#ifdef TEST
	/*if (rate == 1) {
	  for (int i = 0; i < result.rows(); i++) {
	  cout << x(i) << endl;
	  }
	  }*/
	
	for (int i = 0; i < result.rows() / 2; i++) {
	  std::cout << n_type[i] << " " << result(i) << " " << result(i + result.rows() / 2) << std::endl;
	}
	
#endif

	// result.conservativeResize(n_num);

	double E_input = 0;
	double E_inlet = 0;
	double E_outlet = 0;
	for (int i=0; i<f_type.size(); i++) {
	  if (f_type[i] == INLET) {
	    Face f = f_set[i];
	    double f_area = tools.area(f);
	    E_input += (p0_real * p0_real / (2 * rho * speed)) * f_area;
	    for (int j=0; j<FACE_NODE_NUM; j++) {
	      double p = result[f[j]];
	      E_inlet += (p * p / (2 * rho * speed)) * (f_area / FACE_NODE_NUM);
	    }
	  }
	}
	for (int i=0; i<f_type.size(); i++) {
	  if (f_type[i] == OUTLET) {
	    Face f = f_set[i];
	    double f_area = tools.area(f);
	    for (int j=0; j<FACE_NODE_NUM; j++) {
	      double p = result[f[j]];
	      E_outlet += (p * p / (2 * rho * speed)) * (f_area / FACE_NODE_NUM);
	    }
	  }
	}
	std::cout << "E_input = " << E_input << std::endl;
	std::cout << "E_inlet = " << E_inlet << std::endl;
	std::cout << "E_outlet = " << E_outlet << std::endl;
	
	err = vtk_io.writeData(output_model_file+"_real.vtk", n_set, v_set, result, REAL); 
	checkError("writing output model");
	err = vtk_io.writeData(output_model_file+"_imag.vtk", n_set, v_set, result, IMAG); 
	checkError("writing output model");

}

int main(int argc, char *argv[]) {

	/*if (argc != 4)
		err = ERR_WRONG_ARG_NUMBER;
	checkError("argument");

	std::string default_config_file(argv[1]);
	std::string config_file(argv[2]);
	std::string model_file(argv[3]);*/

#ifdef WINDOWS
  std::string default_config_file = "..\\file\\default_config.txt";
  std::string config_file = "..\\file\\config.txt";
  std::string model_file = "..\\tet\\muffler.vtk";
  std::string output_model_file = "..\\file\\output_muffler.vtk";
#endif
  
#ifdef LINUX
  std::string default_config_file = "../../file/default_config.txt";
  std::string config_file = "../../file/config.txt";
#ifdef TEST_LAPLACE
  std::string model_file = "../../tet/test_laplace.vtk";
  std::string output_model_file = "../../file/output_test_laplace.vtk";
#endif
  std::string model_file = "../../tet/cylinder_large.vtk";
  std::string output_model_file = "../../file/output_cylinder";
#endif

  pipeline(default_config_file, config_file, model_file, output_model_file);

#ifdef WINDOWS
  system("pause");
#endif

  return 0;
}
